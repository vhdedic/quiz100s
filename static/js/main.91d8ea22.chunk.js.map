{"version":3,"sources":["components/QuizStart.js","components/QuizEnd.js","components/QuizBody.js","Quiz.js","index.js"],"names":["QuizStart","className","to","React","Component","QuizEnd","this","props","finalTime","finalScore","data","shuffle","questions","QuizBody","state","time","score","success","handleClick","bind","timeCounter","setInterval","timer","clearInterval","setState","e","target","value","correct","position","answerInput","answers","map","oneAnswer","index","onClick","question","Quiz","basename","path","ReactDOM","render","document","querySelector"],"mappings":"g2NAkBeA,E,4JAZb,WACE,OACE,sBAAKC,UAAU,OAAf,UACE,6CACA,cAAC,IAAD,CAAMC,GAAG,QAAT,SACA,oD,GANgBC,IAAMC,W,iCCkBfC,E,4JAjBb,WACE,OACE,gCACE,cAAC,IAAD,CAAMH,GAAG,IAAT,SACE,iDAEF,iDACmBI,KAAKC,MAAMC,UAD9B,OAGA,wCACUF,KAAKC,MAAME,qB,GAXPN,IAAMC,WCAtBM,EAAOC,IAAQC,GAwFNC,E,kDArFb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,KAAM,IACNC,MAAO,EACPC,SAAS,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,qDAUnB,WAAqB,IAAD,OAClBb,KAAKc,YAAcC,aAAY,kBAAM,EAAKC,UAAS,O,kCAGrD,WACEC,cAAcjB,KAAKc,e,mBAGrB,WACMd,KAAKQ,MAAMC,KAAO,GAAKT,KAAKQ,MAAMG,SACpCX,KAAKkB,SAAS,CACZT,KAAKT,KAAKQ,MAAMC,KAAO,M,yBAK7B,SAAYU,GACKA,EAAEC,OAAOC,QACFjB,EAAKJ,KAAKQ,MAAME,OAAOY,QAG3CtB,KAAKkB,SAAS,CACZR,MAAOV,KAAKQ,MAAME,MAAQ,IAG5BV,KAAKkB,SAAS,CACZP,SAAS,M,oBAKf,WAAU,IAAD,OACDY,EAAWnB,EAAKJ,KAAKQ,MAAME,OAE3Bc,EADaD,EAASE,QACGC,KAAI,SAACC,EAAWC,GAAZ,OACjC,wBACEC,QAAS,EAAKjB,YAEdS,MAAOM,EAHT,SAKGA,GAHIC,MAOT,OAAI5B,KAAKQ,MAAMC,KAAO,GAAKT,KAAKQ,MAAMG,QAElC,sBAAKhB,UAAU,OAAf,UACE,4BAAI4B,EAASO,WACb,8BAAMN,IACN,iDACmBxB,KAAKQ,MAAMC,KAD9B,OAGA,wCACUT,KAAKQ,MAAME,YAII,IAApBV,KAAKQ,MAAMC,KAElB,sBAAKd,UAAU,OAAf,UACE,8CACA,cAAC,EAAD,CAASQ,WAAYH,KAAKQ,MAAME,MAAOR,UAAWF,KAAKQ,MAAMC,UAGvDT,KAAKQ,MAAMG,aAAhB,EAEH,sBAAKhB,UAAU,OAAf,UACE,8CACA,cAAC,EAAD,CAASQ,WAAYH,KAAKQ,MAAME,MAAOR,UAAWF,KAAKQ,MAAMC,c,GA/EhDZ,IAAMC,WCsBdiC,E,4JAnBb,WACE,OACE,cAAC,IAAD,CAAQC,SAAS,YAAjB,SACE,gCACE,kDACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,kB,GAXKpC,IAAMC,WCJzBoC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.91d8ea22.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\n\nclass QuizStart extends React.Component {\n  render() {\n    return (\n      <div className=\"quiz\">\n        <p>Press Start.</p>\n        <Link to=\"/quiz\">\n        <button>Start</button>\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default QuizStart;","import React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\n\nclass QuizEnd extends React.Component {\n  render() {\n    return (\n      <div>\n        <Link to=\"/\">\n          <button>Try Again</button>\n        </Link>\n        <p>\n          Remaining time: {this.props.finalTime}s\n        </p>\n        <p>\n          Score: {this.props.finalScore}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default QuizEnd;","import React from 'react';\nimport shuffle from 'shuffle-array';\nimport questions from './json/questions.json';\nimport QuizEnd from './QuizEnd';\n\nconst data = shuffle(questions);\n\nclass QuizBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 100,\n      score: 0,\n      success: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.timeCounter = setInterval(() => this.timer(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timeCounter);\n  }\n\n  timer() {\n    if (this.state.time > 0 && this.state.success) {\n      this.setState({\n        time:this.state.time - 1\n      });\n    } \n  }\n\n  handleClick(e) {\n    const answer = e.target.value;\n    const correctAnswer = data[this.state.score].correct;\n\n    if (answer === correctAnswer) {\n      this.setState({\n        score: this.state.score + 1\n      });\n    } else {\n      this.setState({\n        success: false\n      });\n    }\n  }\n\n  render() {\n    const position = data[this.state.score];\n    const allAnswers = position.answers;\n    const answerInput = allAnswers.map((oneAnswer, index) => (\n      <button\n        onClick={this.handleClick}\n        key={index}\n        value={oneAnswer}\n      >\n        {oneAnswer}\n      </button> \n    ))\n\n    if (this.state.time > 0 && this.state.success) {\n      return (\n        <div className=\"quiz\">\n          <p>{position.question}</p>\n          <div>{answerInput}</div>\n          <p>\n            Remaining time: {this.state.time}s\n          </p>\n          <p>\n            Score: {this.state.score}\n          </p>\n        </div>\n      )\n    } else if (this.state.time === 0) {\n      return (\n        <div className=\"quiz\">\n          <p>Time expired.</p>\n          <QuizEnd finalScore={this.state.score} finalTime={this.state.time} />\n        </div>\n      )\n    } else if (!this.state.success) {\n      return (\n        <div className=\"quiz\">\n          <p>Wrong Answer.</p>\n          <QuizEnd finalScore={this.state.score} finalTime={this.state.time} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default QuizBody;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport QuizStart from './components/QuizStart';\nimport QuizBody from './components/QuizBody';\n\nclass Quiz extends React.Component {\n  render() {\n    return (\n      <Router basename=\"/quiz100s\" >\n        <div>\n          <h1>Quiz 100 seconds</h1>\n          <Switch>\n            <Route path=\"/quiz\">\n              <QuizBody />\n            </Route>\n            <Route path=\"/\">\n              <QuizStart />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default Quiz;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Quiz from './Quiz'\n\nReactDOM.render(\n  <Quiz />,\n  document.querySelector('#root')\n);\n\n\n"],"sourceRoot":""}